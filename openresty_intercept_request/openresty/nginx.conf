worker_processes auto;
error_log /dev/stderr info;

events {
    worker_connections 1024;
}

http {
    lua_package_path "/usr/local/openresty/nginx/lua/?.lua;;";
    lua_shared_dict kafka_queue 10m;
    
    resolver 127.0.0.11 ipv6=off;
    
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /dev/stdout main;

    upstream backend {
        server api:3000 max_fails=3 fail_timeout=30s;
    }

    server {
        listen 8080;
        server_name localhost;

        location / {
            # Initialize Lua variables
            set $backend_url '';
            set $kafka_broker '';
            
            # Try to proxy to backend, if it fails, intercept with Lua
            access_by_lua_file /usr/local/openresty/nginx/lua/intercept_request.lua;

            # Proxy to backend
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Handle upstream errors
            proxy_intercept_errors on;
            error_page 502 503 504 = @backend_error;
            
            # Timeout settings
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
        }

        location @backend_error {
            internal;
            content_by_lua_file /usr/local/openresty/nginx/lua/handle_error.lua;
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "OpenResty is running\n";
            add_header Content-Type text/plain;
        }
    }
}

