server {
    listen 80;
    server_name localhost;

    # OAuth 2.0 endpoints
    location /oauth2/ {
        access_by_lua_file /usr/local/openresty/lualib/oauth2.lua;
        proxy_pass http://keycloak:8080/realms/master/protocol/openid-connect/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Login endpoint
    location /login {
        access_by_lua_block {
            local args = ngx.req.get_uri_args()
            local redirect_uri = args.redirect_uri or "/"
            local state = ngx.encode_base64(ngx.time() .. ":" .. redirect_uri)
            
            local keycloak_url = os.getenv("KEYCLOAK_URL") or "http://keycloak:8080"
            local realm = os.getenv("KEYCLOAK_REALM") or "master"
            local client_id = os.getenv("KEYCLOAK_CLIENT_ID") or "nginx-client"
            
            local auth_url = keycloak_url .. "/realms/" .. realm .. "/protocol/openid-connect/auth" ..
                "?client_id=" .. client_id ..
                "&response_type=code" ..
                "&scope=openid profile email" ..
                "&redirect_uri=" .. ngx.var.scheme .. "://" .. ngx.var.host .. "/callback" ..
                "&state=" .. state
            
            ngx.redirect(auth_url)
        }
    }

    # OAuth callback endpoint
    location /callback {
        access_by_lua_file /usr/local/openresty/lualib/oauth_callback.lua;
        return 200 "Login successful! Redirecting...";
    }

    # Logout endpoint
    location /logout {
        access_by_lua_block {
            ngx.header["Set-Cookie"] = "access_token=; Path=/; Expires=Thu, 01 Jan 1970 00:00:00 GMT; HttpOnly"
            ngx.header["Set-Cookie"] = "refresh_token=; Path=/; Expires=Thu, 01 Jan 1970 00:00:00 GMT; HttpOnly"
            ngx.redirect("/")
        }
    }

    # Protected API endpoints
    location /api/ {
        # Read request body
        lua_need_request_body on;
        
        # Authentication and body transformation combined
        access_by_lua_file /usr/local/openresty/lualib/auth_check.lua;
        
        # Proxy to Express app
        proxy_pass http://app:3000/api;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Content-Type $content_type;
        proxy_set_header Authorization $http_authorization;
        
        # Add user info headers (set by Lua script)
        proxy_set_header X-User-ID $http_x_user_id;
        proxy_set_header X-User-Email $http_x_user_email;
        proxy_set_header X-User-Name $http_x_user_name;
        
        # Transform response body
        header_filter_by_lua_block {
            ngx.header.content_length = nil
        }
        body_filter_by_lua_file /usr/local/openresty/lualib/response_transform.lua;
    }

    # Health check endpoint (public)
    location /health {
        proxy_pass http://app:3000/health;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Root endpoint - show login or user info
    location / {
        access_by_lua_file /usr/local/openresty/lualib/root_handler.lua;
        return 200 "Welcome! You are logged in.";
    }
}
