worker_processes  1;

error_log  /usr/local/openresty/nginx/logs/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;
    resolver 127.0.0.11 ipv6=off;
    resolver_timeout 5s;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
    access_log  /usr/local/openresty/nginx/logs/access.log  main;

    sendfile        on;
    keepalive_timeout  65;

    upstream api_upstream {
        server api:3000;
        keepalive 16;
    }

    upstream oauth2_proxy_upstream {
        server oauth2-proxy:4180;
        keepalive 16;
    }

    # Bearer token validation endpoint
    upstream keycloak_upstream {
        server keycloak:8080;
        keepalive 16;
    }

    server {
        listen       8080;
        server_name  _;

        # OAuth2 Proxy endpoints
        location = /oauth2/auth {
            proxy_pass http://oauth2_proxy_upstream;
            proxy_set_header Host $host;
            proxy_set_header X-Original-URI $request_uri;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Scheme $scheme;
            proxy_set_header X-Auth-Request-Redirect $request_uri;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
        }

        location /oauth2/ {
            proxy_pass http://oauth2_proxy_upstream;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Scheme $scheme;
        }

        # Bearer token validation endpoint
        location = /auth/bearer {
            internal;
            proxy_pass http://keycloak_upstream/realms/example/protocol/openid-connect/userinfo;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_set_header Authorization $http_authorization;
            proxy_set_header Host keycloak;
        }

        # Public routes - no authentication required
        location /api/public/ {
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_pass http://api_upstream;
        }

        location = / {
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_pass http://api_upstream;
        }

        # Protected routes - support both Bearer tokens and session auth
        location /api/protected/ {
            # Check for Bearer token first
            if ($http_authorization ~ "Bearer (.+)") {
                auth_request /auth/bearer;
                auth_request_set $user $upstream_http_x_user;
                auth_request_set $email $upstream_http_x_email;
                auth_request_set $preferred_username $upstream_http_x_preferred_username;
                
                proxy_set_header X-User $preferred_username;
                proxy_set_header X-Email $email;
            }
            
            # For session auth, use oauth2-proxy
            if ($http_authorization !~ "Bearer (.+)") {
                auth_request /oauth2/auth;
                error_page 401 = @oauth2_signin;
                error_page 403 = /oauth2/sign_in;
                
                # propagate user identity headers set by oauth2-proxy
                auth_request_set $user $upstream_http_x_auth_request_user;
                auth_request_set $email $upstream_http_x_auth_request_email;
                auth_request_set $groups $upstream_http_x_auth_request_groups;
                
                proxy_set_header X-User $user;
                proxy_set_header X-Email $email;
                proxy_set_header X-Groups $groups;
            }

            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_pass http://api_upstream;
        }

        # Legacy protected route (for backward compatibility)
        location /api/hello {
            # Check for Bearer token first
            if ($http_authorization ~ "Bearer (.+)") {
                auth_request /auth/bearer;
                auth_request_set $user $upstream_http_x_preferred_username;
                proxy_set_header X-User $user;
            }
            
            # For session auth, use oauth2-proxy
            if ($http_authorization !~ "Bearer (.+)") {
                auth_request /oauth2/auth;
                error_page 401 = @oauth2_signin;
                error_page 403 = /oauth2/sign_in;
                auth_request_set $user $upstream_http_x_auth_request_user;
                proxy_set_header X-User $user;
            }

            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_pass http://api_upstream;
        }

        # Named location to initiate login preserving original URL
        location @oauth2_signin {
            return 302 /oauth2/start?rd=$scheme://$host$request_uri;
        }
    }
}