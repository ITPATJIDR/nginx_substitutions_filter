# Upstream for the Express app
upstream app {
    server app:3000;
}

# JWT validation configuration
map $http_authorization $jwt_token {
    ~^Bearer\s+(.+)$ $1;
    default "";
}

server {
    listen 80;
    server_name localhost;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    # Health check endpoint (no authentication required)
    location /health {
        access_log off;
        add_header Content-Type application/json;
        return 200 '{"status":"healthy","service":"nginx-gateway","timestamp":"$time_iso8601"}';
    }

    # Nginx status endpoint
    location /nginx-status {
        access_log off;
        add_header Content-Type application/json;
        return 200 '{"status":"healthy","service":"nginx","timestamp":"$time_iso8601","version":"$nginx_version"}';
    }

    # Keycloak authentication endpoint
    location = /auth {
        internal;
        proxy_pass http://keycloak:8080/realms/test/protocol/openid-connect/userinfo;
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
        proxy_set_header X-Original-URI $request_uri;
        proxy_set_header Authorization $http_authorization;
    }

    # Protected routes (require authentication)
    location /api/ {
        # Apply rate limiting
        limit_req zone=api burst=20 nodelay;

        # Authenticate with Keycloak
        auth_request /auth;

        # Set user information headers from auth response
        auth_request_set $user_info $upstream_http_x_user_info;
        auth_request_set $user_email $upstream_http_x_user_email;
        auth_request_set $user_name $upstream_http_x_user_name;
        auth_request_set $user_roles $upstream_http_x_user_roles;

        # Pass user info to backend
        proxy_set_header X-User-Info $user_info;
        proxy_set_header X-User-Email $user_email;
        proxy_set_header X-User-Name $user_name;
        proxy_set_header X-User-Roles $user_roles;

        # Standard proxy headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Remove authorization header before passing to backend
        proxy_set_header Authorization "";

        proxy_pass http://app;
    }

    # Admin routes (require admin role)
    location /admin {
        # Apply stricter rate limiting
        limit_req zone=api burst=5 nodelay;

        # Authenticate with Keycloak
        auth_request /auth;

        # Set user information headers from auth response
        auth_request_set $user_info $upstream_http_x_user_info;
        auth_request_set $user_email $upstream_http_x_user_email;
        auth_request_set $user_name $upstream_http_x_user_name;
        auth_request_set $user_roles $upstream_http_x_user_roles;

        # Pass user info to backend
        proxy_set_header X-User-Info $user_info;
        proxy_set_header X-User-Email $user_email;
        proxy_set_header X-User-Name $user_name;
        proxy_set_header X-User-Roles $user_roles;

        # Standard proxy headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Remove authorization header before passing to backend
        proxy_set_header Authorization "";

        proxy_pass http://app;
    }

    # Public routes (no authentication required)
    location / {
        # Basic rate limiting for public endpoints
        limit_req zone=api burst=50 nodelay;

        # Standard proxy headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Check if user is authenticated (optional)
        auth_request /auth;
        auth_request_set $user_info $upstream_http_x_user_info;
        auth_request_set $user_email $upstream_http_x_user_email;
        auth_request_set $user_name $upstream_http_x_user_name;
        auth_request_set $user_roles $upstream_http_x_user_roles;

        # Pass user info if available (graceful degradation)
        proxy_set_header X-User-Info $user_info;
        proxy_set_header X-User-Email $user_email;
        proxy_set_header X-User-Name $user_name;
        proxy_set_header X-User-Roles $user_roles;

        # Remove authorization header
        proxy_set_header Authorization "";

        proxy_pass http://app;
    }

    # Error pages
    error_page 401 = @error401;
    error_page 403 = @error403;
    error_page 404 = @error404;
    error_page 500 502 503 504 = @error50x;

    location @error401 {
        add_header Content-Type application/json always;
        return 401 '{"error":"Unauthorized","message":"Authentication required","timestamp":"$time_iso8601"}';
    }

    location @error403 {
        add_header Content-Type application/json always;
        return 403 '{"error":"Forbidden","message":"Access denied","timestamp":"$time_iso8601"}';
    }

    location @error404 {
        add_header Content-Type application/json always;
        return 404 '{"error":"Not Found","message":"Resource not found","timestamp":"$time_iso8601"}';
    }

    location @error50x {
        add_header Content-Type application/json always;
        return 500 '{"error":"Internal Server Error","message":"Something went wrong","timestamp":"$time_iso8601"}';
    }
}
