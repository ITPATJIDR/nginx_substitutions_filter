worker_processes  1;

error_log  /usr/local/openresty/nginx/logs/error.log warn;
pid        /var/run/nginx.pid;

# Allow Lua to access these environment variables (must be in main context)
env OIDC_DISCOVERY;
env OIDC_CLIENT_ID;
env OIDC_CLIENT_SECRET;
env OIDC_REDIRECT_SCHEME;
env SESSION_SECRET;

events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
    access_log  /usr/local/openresty/nginx/logs/access.log  main;

    sendfile        on;
    keepalive_timeout  65;

    lua_code_cache off;

    # lua-resty-openidc shared dicts
    lua_shared_dict discovery 1m;
    lua_shared_dict jwks 1m;

    lua_package_path '/usr/local/openresty/site/lualib/?.lua;;';
    lua_package_cpath '/usr/local/openresty/site/lualib/?.so;;';

    upstream api_upstream {
        server api:3000;
        keepalive 16;
    }

    server {
        listen       8080;
        server_name  _;

        # Global access phase: validate Bearer JWT (no redirects)
        # Global access phase: validate Bearer JWT (no redirects)
        access_by_lua_block {
            local openidc = require("resty.openidc")
            
            -- Extract Bearer token from Authorization header
            local auth_header = ngx.var.http_authorization
            if not auth_header then
                ngx.header["WWW-Authenticate"] = 'Bearer error="invalid_token", error_description="missing authorization header"'
                return ngx.exit(ngx.HTTP_UNAUTHORIZED)
            end
            
            local token = auth_header:match("Bearer%s+(.+)")
            if not token then
                ngx.header["WWW-Authenticate"] = 'Bearer error="invalid_token", error_description="invalid authorization header format"'
                return ngx.exit(ngx.HTTP_UNAUTHORIZED)
            end
            
            local opts = {
                discovery = os.getenv("OIDC_DISCOVERY"),
                ssl_verify = "no",
                accept_none_alg = false,
                token_signing_alg_values_expected = { "RS256" }
            }
            
            local jwt, err = openidc.jwt_verify(token, opts)
            if err then
                ngx.header["WWW-Authenticate"] = 'Bearer error="invalid_token", error_description="' .. (err or "jwt verification failed") .. '"'
                return ngx.exit(ngx.HTTP_UNAUTHORIZED)
            end
            
            local claims = (jwt and jwt.payload) or {}
            local username = claims.preferred_username or claims.email or claims.sub
            if username then
                ngx.req.set_header("X-User", username)
            end
        }

        location / {
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_pass http://api_upstream;
        }
    }
}


